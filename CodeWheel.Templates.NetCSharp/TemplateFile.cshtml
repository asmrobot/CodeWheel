@model CodeWheel.Templates.NetCSharp.DataEntity
@Model.ImportNameSpace
using ZTImage.Net;
using ZTImage.Net.Protocol;

namespace @Model.ProtocolModel.package
{
    /// <summary>
    /// @Model.CurrentCommand.descript
    /// 命令：@(Model.CurrentCommand.command)
    /// 命令构建器
    ///</summary>
    public class @(Model.CurrentCommand.name): IProtocolBuilder
    {
        @if (Model.CurrentCommand.fields.Count > 0)
        {
        @:public @(Model.CurrentCommand.name)()
        @:{}
        }
        

        public @(Model.CurrentCommand.name)(@(Model.CurrentCommand.GetMethodParameterString()))
        {
        @foreach (var field in Model.CurrentCommand.fields)
        {
            
            @:this.@(field.name)=@(field.name.ToLower());
        }
        }

        public byte Command
        {
            get
            {
                return @(Model.CurrentCommand.command);
            }
        }

           
        @foreach (var field in Model.CurrentCommand.fields)
        {
        @:/// <summary>
        @:///@(field.descript)
        @:///</summary>
        @:public @(field.GetTypeString()) @(field.name){get;set;}
        }


        ///<summary>
        ///对象转为字节数组
        ///</summary>
        public byte[] ProtocolBuilder(out int offset, out int count)
        {
            offset = 0;
            count = 0;
            ProtoStreamWriter writer = new ProtoStreamWriter(this.Command, 0);
            @foreach (var field in Model.CurrentCommand.fields)
            {
            @:writer.@(field.GetWriterOperationString())(this.@(field.name));
            }
            
            return writer.GetBuffer(out offset, out count);
        }

    } 


    /// <summary>
    /// @Model.CurrentCommand.descript
    /// 命令：@(Model.CurrentCommand.command)
    /// 命令处理器
    ///</summary>
    public class @(Model.CurrentCommand.name)Process : IReceiveProcesser
    {
        private ReceiveCallback<@(Model.CurrentCommand.name)> _callback;

        public @(Model.CurrentCommand.name)Process(ReceiveCallback<@(Model.CurrentCommand.name)> callback)
        {
            this._callback = callback;
        }

        public void Proccess(byte[] buffer, int offset, int count)
        {
            @(Model.CurrentCommand.name) model = new @(Model.CurrentCommand.name)();
            try
            {
                //解析对象
                ProtoStreamReader reader = new ProtoStreamReader(buffer, offset, count);
                @foreach (var field in Model.CurrentCommand.fields)
                {
                    @:model.@(field.name) = reader.@(field.GetReaderOperationString())();
                }
                
                if (this._callback != null)
                {
                    this._callback(model);
                }
            }
            catch
            {
                return;
            }
        }
    }
    
    
}